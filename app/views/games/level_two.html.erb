<script type="text/javascript">
var game = new Phaser.Game(860, 600, Phaser.AUTO, 'game-container', { preload: preload, create: create, update: update, render: render});



function preload() {
    // these are for the timer to start where it left off
    previous_time = localStorage.getItem("firstLevelTime");
    // i dont know why previous_time / - 1000 works but it does
    beginningTimeSeconds = (game.time.time / 1000);
    beginningTimeMS = game.time.time;
    

    game.load.image('blank_line', '/images/blank_line.png');
    game.load.image('purp_line', '/images/purp_line.png');
    game.load.image('clouds', '/images/cloud_background.png');
	game.load.image('background', '/images/city_parallax.png');
    game.load.image('sidewalk', '/images/ground_parallax.png');
    game.load.spritesheet('user', '/images/runninmoney.png', 250, 320, 60);

	}
    // these create the timer variables
var timer;
var timer2;
var total;
var total2;

function create() {
    game.physics.startSystem(Phaser.Physics.ARCADE);
    game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
    game.input.onDown.add(gofull, this);
    game.world.setBounds(0, 0, 2000, 2000);
     
    clouds = game.add.image(0, 0, 'clouds');

    // inserting background image
    background = game.add.image(0, 0, 'background');
    background.height = game.height;


    sidewalk = game.add.image(0, -365, 'sidewalk');
    // sidewalk.x += 10;
    //    background.width = game.width

    // creating ground so i can customize ground
    platforms = game.add.group();
    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;
    // adding sidewalk
    var ground = platforms.create(0,500, 'blank_line');
    game.physics.arcade.enable(ground);
    ground.scale.setTo(200, 2);
    ground.body.immovable = true;
    // creating player
    player = game.add.sprite(1, -200, 'user');
    //  We need to enable physics on the player
    game.physics.arcade.enable(player);
    game.physics.enable(player);
    game.camera.follow(player);
    player.scale.setTo(.7,.7)
    player.body.gravity.y = 500;
    player.body.checkCollision.up = false;
    player.body.checkCollision.left = false;
    player.body.checkCollision.right = false;
     //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y= 0.2;
    player.body.gravity.y = 375;
    player.body.collideWorldBounds = true;

    //  Our two animations, walking left and right.
    player.animations.add('left',[3,4,5,6,7,8,9,10], 9, true);
    player.animations.add('right',[58,57,56,55,54,53,52,51,50], 9, true);

    cursors = game.input.keyboard.createCursorKeys();

             //  Create our Timer
    timer = game.time.create(false);
    timer2 = game.time.create(false);
    //  Set a TimerEvent to occur after 2 seconds
    timer.loop(750, updateCounter, this);
    timer2.loop(1, updateCounter2, this);
    //  Start the timer running - this is important!
    //  It won't start automatically, allowing you to hook it to button events and the like.
    timer.start();
    timer2.start();
       


    }

function update() {
    game.physics.arcade.collide(player, platforms);
    // for could movement

    // helps woth parallax movement
    clouds.x=game.camera.x*0.9;
    background.x=game.camera.x*0.8;
    sidewalk.x=game.camera.x*0.2;

   
    //  Reset the players velocity (movement)
    player.body.velocity.x = 0;

    if (cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x = -250;

        player.animations.play('left');
        game.camera.x -= 4;
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        player.body.velocity.x = 250;

        player.animations.play('right');
        game.camera.x += 4;
        
    }
    else
    {
        //  Stand still
        player.animations.stop();

        player.frame = 24;
    }

    //  Allow the player to jump if they are touching the ground.
    if (cursors.up.isDown && player.body.touching.down)
    {
        player.body.velocity.y = -350;
    }



}
    

function gofull() {

    if (game.scale.isFullScreen)
    {
        game.scale.stopFullScreen();
    }
    else
    {
        game.scale.startFullScreen(false);
    }
}
// both these functions add the time elapsed once level is finished and clock is skilled
function updateCounter() {
    total++;
}
function updateCounter2() {
    total2++;
}

function render() {
    // this is to display the clock
    game.debug.text('TIME: ' + ((game.time.time / 1000) - beginningTimeSeconds).toFixed(1) + 's', 685, 25);
    // this allows player to be followed by camera
    // game.debug.cameraInfo(game.camera, 0, 0);
    
}
    


</script>
